name: Quality Checks

on:
  push:
    branches-ignore: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  shellcheck:
    name: Shell Script Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@2.0.0
      with:
        check_together: 'yes'
        severity: error

  bash-syntax:
    name: Bash Syntax Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check bash syntax
      run: |
        for script in $(find . -name "*.sh" -type f); do
          echo "Checking $script..."
          bash -n "$script"
        done

  permissions:
    name: File Permissions
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check script permissions
      run: |
        for script in $(find . -name "*.sh" -type f); do
          if [[ ! -x "$script" ]]; then
            echo "ERROR: $script is not executable"
            exit 1
          fi
        done

  test-scripts:
    name: Test Installation
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Test audio-notify.sh exists and is valid
      run: |
        bash -n hooks/audio-notify.sh
        echo "✓ audio-notify.sh syntax is valid"
    
    - name: Test install script syntax
      run: |
        bash -n install.sh
        echo "✓ install.sh syntax is valid"
    
    - name: Test uninstall script syntax
      run: |
        bash -n uninstall.sh
        echo "✓ uninstall.sh syntax is valid"

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check required documentation exists
      run: |
        required_files=(
          "README.md"
          "LICENSE"
          "docs/CONFIGURATION.md"
          "docs/TROUBLESHOOTING.md"
          "docs/DEVELOPMENT.md"
          "docs/INSTALLATION.md"
        )
        
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "ERROR: Required file $file is missing"
            exit 1
          fi
          echo "✓ $file exists"
        done

  cache-test:
    name: Test with Cache
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache
        key: ${{ runner.os }}-test-${{ hashFiles('**/*.sh') }}
        restore-keys: |
          ${{ runner.os }}-test-
    
    - name: Verify cached environment
      run: echo "Cache configured for improved performance"